<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.nuc.article.dao.RoleMapper">

	<!-- 角色信息结果集（不含级联数据） -->
	<resultMap id="BaseResultMap" type="cn.edu.nuc.article.entity.Role">
		<id column="roleid" jdbcType="INTEGER" property="roleid" />
		<result column="rolename" jdbcType="VARCHAR" property="rolename" />
		<result column="roledesc" jdbcType="VARCHAR" property="roledesc" />
		<result column="rolestate" jdbcType="INTEGER" property="rolestate" />
	</resultMap>
	
	<!-- 角色信息基本列（不含级联数据） -->
	<sql id="Base_Column_List">
		roleid, rolename, roledesc, rolestate
	</sql>
	
	<!-- 查询条件和排序的设置 -->
	<sql id="WhereAndOrderBy">
	
		<!-- 给字符串类型的参数加% -->
		<if test="rolename != null">
			<bind name="_rolename" value="'%'+rolename+'%'"/>
		</if>
		
		<if test="roledesc != null">
			<bind name="_roledesc" value="'%'+roledesc+'%'"/>
		</if>
	
		<!-- 动态加入查询条件 -->
		WHERE 1=1
			<if test="roleid != null">
				AND roleid = #{roleid,jdbcType=INTEGER}
			</if>
			<if test="rolename != null">
				AND rolename LIKE #{_rolename,jdbcType=VARCHAR}
			</if>
			<if test="roledesc != null">
				AND roledesc LIKE #{_roledesc,jdbcType=VARCHAR}
			</if>
			<if test="rolestate != null">
				AND rolestate = #{rolestate,jdbcType=INTEGER}
			</if>
		
		<!-- 加入排序条件 -->
		ORDER BY
			roleid DESC
	</sql>
	
	<!-- 检查是否有同名角色 -->
	<select id="hasSameRole" resultMap="BaseResultMap">
		
		select
			<include refid="Base_Column_List" />
		from 
			tb_role
		where 
			rolename = #{rolename,jdbcType=VARCHAR}
			
			<if test="roleid != null">
				AND roleid != #{roleid,jdbcType=INTEGER}
			</if>
			
	</select>

	<!-- 按主键查询角色信息（不级联） -->
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		
		select
			<include refid="Base_Column_List" />
		from 
			tb_role
		where 
			roleid = #{roleid,jdbcType=INTEGER}
	</select>
	
	<!-- 模糊查询角色信息（不级联） -->
	<select id="selectByKeyword" parameterType="cn.edu.nuc.article.entity.Role" resultMap="BaseResultMap">
		
		select
			<include refid="Base_Column_List" />
		from 
			tb_role
		
		<!-- 引入查询条件和排序规则 -->
		<include refid="WhereAndOrderBy"></include>
	</select>
	
	<!-- 级联查询的基本语句 -->
	<sql id="cascadeSelect">
		SELECT
			tb_role.roleid,
			tb_role.rolename,
			tb_role.roledesc,
			tb_role.rolestate,
			tb_function.funid,
			tb_function.funname,
			tb_function.funpid,
			tb_function.funurl,
			tb_function.funstate
		FROM
			tb_role
			LEFT OUTER JOIN 
				tb_roleright ON tb_roleright.role_id = tb_role.roleid
			LEFT OUTER JOIN 
				tb_function ON tb_roleright.fun_id = tb_function.funid
	</sql>
	
	<!-- 角色信息结果集（含级联数据） -->
	<resultMap id="CascadeResultMap" type="cn.edu.nuc.article.entity.Role">
		<id column="roleid" jdbcType="INTEGER" property="roleid" />
		<result column="rolename" jdbcType="VARCHAR" property="rolename" />
		<result column="roledesc" jdbcType="VARCHAR" property="roledesc" />
		<result column="rolestate" jdbcType="INTEGER" property="rolestate" />
		
		<!-- 设置角色和功能的多对多关联关系 -->
		<collection property="functionList" ofType="cn.edu.nuc.article.entity.Function">
			<id column="funid" property="funid"/>
			<result column="funname" property="funname"/>
			<result column="funurl" property="funurl"/>
			<result column="funpid" property="funpid"/>
			<result column="funstate" property="funstate"/>
		</collection>
	</resultMap>
	
	<!-- 按主键查询角色信息（级联） -->
	<select id="selectByPrimaryKeyCascade" parameterType="java.lang.Integer" resultMap="CascadeResultMap">
		
		<!-- 引入级联查询SQL -->
		<include refid="cascadeSelect"></include>
		
		<!-- 加上查询条件 -->
		WHERE 
			roleid = #{roleid,jdbcType=INTEGER}
		ORDER BY
			tb_function.funid ASC
	</select>
	
	<!-- 模糊查询角色信息（级联） -->
	<select id="selectByKeywordCascade" parameterType="cn.edu.nuc.article.entity.Role" resultMap="CascadeResultMap">
		
		<!-- 引入级联查询SQL -->
		<include refid="cascadeSelect"></include>
		
		<!-- 引入查询条件和排序规则 -->
		<include refid="WhereAndOrderBy"></include>
			
	</select>

	<!-- 选择性插入 -->
	<insert id="insertSelective" parameterType="cn.edu.nuc.article.entity.Role">
		insert into tb_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="roleid != null">
				roleid,
			</if>
			<if test="rolename != null">
				rolename,
			</if>
			<if test="roledesc != null">
				roledesc,
			</if>
			<if test="rolestate != null">
				rolestate,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="roleid != null">
				#{roleid,jdbcType=INTEGER},
			</if>
			<if test="rolename != null">
				#{rolename,jdbcType=VARCHAR},
			</if>
			<if test="roledesc != null">
				#{roledesc,jdbcType=VARCHAR},
			</if>
			<if test="rolestate != null">
				#{rolestate,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	
	<!-- 按主键选择性更新 -->
	<update id="updateByPrimaryKeySelective" parameterType="cn.edu.nuc.article.entity.Role">
		update 
			tb_role
		<set>
			<if test="rolename != null">
				rolename = #{rolename,jdbcType=VARCHAR},
			</if>
			<if test="roledesc != null">
				roledesc = #{roledesc,jdbcType=VARCHAR},
			</if>
			<if test="rolestate != null">
				rolestate = #{rolestate,jdbcType=INTEGER},
			</if>
		</set>
		where 
			roleid = #{roleid,jdbcType=INTEGER}
	</update>
	
	<!-- 删除某个角色的全部权限信息（更新权限设置用） -->
	<delete id="deleteOldRoleRights" parameterType="java.lang.Integer">
		delete from
			tb_roleright
		where 
			role_id = #{roleid,jdbcType=INTEGER}
	</delete>
	
	<!-- 为某个角色插入新的权限信息 -->
	<insert id="insertNewRoleRightInfo">
		insert into 
			tb_roleright(role_id, fun_id)
		values
			(#{roleid,jdbcType=INTEGER}, #{funid,jdbcType=INTEGER})
	</insert>

</mapper>